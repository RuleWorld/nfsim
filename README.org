#+TITLE: Notes for Rasi's modification to the program

[2018-08-08 Wed]
- I am going to take a crack at speeding up the simulation by removing searches during each simulation step altogether.
- For the current mRNA simulations, I need to update only the reactants that are specified for the reaction. I can do this by identifying all components in each connected molecule at the beginning of the simulation.
- Then I can figure out given that a certain reaction fires, what other reaction rate to update. I can do this again by having a double-sided dictionary between template molecules and reactions. Then whenever I am updating a given template molecule, I need to update only the reaction rates that it is known to change.

[2018-08-01 Wed]
- I successfully implemented the change to examine only a small neighborhood of each mRNA. 
- However, this does not speed up the simulation appreciably since the other main bottleneck seems to be in identifying how molecule transformations affect reaction rates.
- This update step scans over all reactions that a molecule can participate in and identifies whether a particular molecule matches the template of the reaction.
- I take a huge hit in efficiency since the current NFsim method does this by brute force scanning of all bonds and reactions for each molecule.
- Both the ribosome and mRNA participate in a large number of reactions (>1000), but typically only 1-5 reaction rates need to be updated.
- I need to refactor the code significantly to optimize this further.
- For example, I could identify all the template reactants for each reaction class, and also identify all reactions that each template participates in.
- Then I can do a lookup rather than a full search, which will significantly speed up the reaction.

[2018-07-31 Tue]
- The simulation with polymer neighborhood search is working as expected.

[2018-07-30 Mon]

- I have implemented the search for product molecules so that all molecules that undergo changes are included.
- However this has not yet worked. Here are lessons learned in the process:
  1. The matching of products to reactantTemplates is not guaranteed. This is because the reactant template seems to include only one template per connected component. If the product molecule is not this template, then the product does not trigger a change in reaction rates. This is stated explicitly in [[file:src/NFtest/simple_system/simple_system.cpp][simple_system.cpp]].  
  2. More generally, whenever you introduce or simulate a new reaction, make sure that the updates are occurring as expected by looking at the product list and reactions around the time when the new reaction first occurs.
- One idea to solve the above problem is to retain the breadthSearch for non-polymeric molecules, and keep the polymerneighborhood search for only polymeric molecules. Then I can keep the traversalLimit for the non-polymeric molecules high.

[2018-07-28 Sat]
To improve breadth only search for ribosome motion on mRNAs, to get a list of possible products for a reaction:
- designate the mRNA as a polymer molecule.
- if you hit a polymer molecule during a breadthonlysearch, do not look for bonded neighbors beyond a distance specified at the start of the simulation. This will keep the number of products from blowing up for longer mRNAs.
