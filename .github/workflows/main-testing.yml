name: main-validation

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v3
    - uses: seanmiddleditch/gha-setup-ninja@v3

    - name: Build on windows and run check
      if: matrix.os == 'windows-latest'
      run: |
        mkdir build
        cd build
        cmake -G "Ninja" ..
        ninja
        cp C:/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin/libgcc_s_seh-1.dll ${{github.workspace}}/build/.
        cp C:/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin/libstdc++-6.dll ${{github.workspace}}/build/.
        cp C:/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin/libwinpthread-1.dll ${{github.workspace}}/build/.
        ./NFsim.exe -h

    - name: Build unix
      if: matrix.os != 'windows-latest'
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r validate/requirements.txt
    - name: Validation
      run: python validate/validate.py validate/.
    - name: Prepare unix bundle
      if: matrix.os != 'windows-latest'
      run: |
        cd 
        mkdir ${{github.workspace}}/bundle_${{ matrix.os }}
        cp ${{github.workspace}}/build/NFsim ${{github.workspace}}/bundle_${{ matrix.os }}/.
    - name: Prepare windows bundle
      if: matrix.os == 'windows-latest'
      run: |
        cd 
        mkdir ${{github.workspace}}/bundle_${{ matrix.os }}
        cp ${{github.workspace}}/build/NFsim.exe ${{github.workspace}}/bundle_${{ matrix.os }}/.        
        cp ${{github.workspace}}/build/*.dll ${{github.workspace}}/bundle_${{ matrix.os }}/.
    - name: Archive compiled NFsim
      uses: actions/upload-artifact@v3
      with:
        name: NFsim_bin_${{ matrix.os }}
        path: ${{github.workspace}}/bundle_${{ matrix.os }}